# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."trmnl-server-app" = {
    image = "ghcr.io/usetrmnl/byos_laravel:latest";
    environment = {
      "PHP_OPCACHE_ENABLE" = "1";
      "TRMNL_PROXY_REFRESH_MINUTES" = "15";
    };
    volumes = [
      "trmnl-server_database:/var/www/html/database:rw"
      "trmnl-server_storage:/var/www/html/storage:rw"
    ];
    ports = [
      "4567:8080/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=app"
      "--network=trmnl-server_default"
    ];
  };

  systemd = {
    services = {
      "podman-trmnl-server-app" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        after = [
          "podman-network-trmnl-server_default.service"
          "podman-volume-trmnl-server_database.service"
          "podman-volume-trmnl-server_storage.service"
        ];
        requires = [
          "podman-network-trmnl-server_default.service"
          "podman-volume-trmnl-server_database.service"
          "podman-volume-trmnl-server_storage.service"
        ];
        partOf = [
          "podman-compose-trmnl-server-root.target"
        ];
        wantedBy = [
          "podman-compose-trmnl-server-root.target"
        ];
      };

      # Networks
      "podman-network-trmnl-server_default" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f trmnl-server_default";
        };
        script = ''
          podman network inspect trmnl-server_default || podman network create trmnl-server_default
        '';
        partOf = ["podman-compose-trmnl-server-root.target"];
        wantedBy = ["podman-compose-trmnl-server-root.target"];
      };

      # Volumes
      "podman-volume-trmnl-server_database" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect trmnl-server_database || podman volume create trmnl-server_database
        '';
        partOf = ["podman-compose-trmnl-server-root.target"];
        wantedBy = ["podman-compose-trmnl-server-root.target"];
      };

      "podman-volume-trmnl-server_storage" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect trmnl-server_storage || podman volume create trmnl-server_storage
        '';
        partOf = ["podman-compose-trmnl-server-root.target"];
        wantedBy = ["podman-compose-trmnl-server-root.target"];
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."podman-compose-trmnl-server-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };
  };
}
