{
  config,
  pkgs,
  lib,
  ...
}: let
  stateDir = "/var/lib/sillytavern";
in {
  services = {
    nginx = {
      upstreams."sillytavern" = {
        servers = {
          "127.0.0.1:${config.variables.ports.sillytavern}" = {};
        };
      };

      virtualHosts."sillytavern.schwem.io".locations."/" = {
        proxyPass = "http://sillytavern";
        proxyWebsockets = true;
      };
    };

    oidcproxy.protectedHosts."sillytavern.schwem.io" = {
      allowedGroups = ["admin"];
      allowedRealmRoles = ["admin"];
      upstream = "http://sillytavern";
    };
  };

  systemd = {
    services = {
      "podman-sillytavern" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        after = [
          "podman-network-sillytavern_default.service"
        ];
        requires = [
          "podman-network-sillytavern_default.service"
        ];
        partOf = [
          "podman-compose-sillytavern-root.target"
        ];
        wantedBy = [
          "podman-compose-sillytavern-root.target"
        ];
      };

      # Networks
      "podman-network-sillytavern_default" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f sillytavern_default";
        };
        script = ''
          podman network inspect sillytavern_default || podman network create sillytavern_default
        '';
        partOf = ["podman-compose-sillytavern-root.target"];
        wantedBy = ["podman-compose-sillytavern-root.target"];
      };

      # Builds
      "podman-build-sillytavern" = {
        path = [pkgs.podman pkgs.git];
        serviceConfig = {
          Type = "oneshot";
          TimeoutSec = 300;
        };
        script = ''
          cd /home/schwem/nixos-config
          podman build -t ghcr.io/sillytavern/sillytavern:latest .
        '';
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."podman-compose-sillytavern-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };

    tmpfiles.rules = [
      "d ${stateDir}/config 0750 root users - -"
      "d ${stateDir}/data 0750 root users - -"
      "d ${stateDir}/extensions 0750 root users - -"
      "d ${stateDir}/plugins 0750 root users - -"
    ];
  };

  virtualisation.oci-containers.containers."sillytavern" = {
    image = "ghcr.io/sillytavern/sillytavern:latest";
    environment = {
      "FORCE_COLOR" = "1";
      "NODE_ENV" = "production";
    };
    volumes = [
      "${stateDir}/config:/home/node/app/config:rw"
      "${stateDir}/data:/home/node/app/data:rw"
      "${stateDir}/extensions:/home/node/app/public/scripts/extensions/third-party:rw"
      "${stateDir}/plugins:/home/node/app/plugins:rw"
    ];
    ports = [
      "127.0.0.1:${config.variables.ports.sillytavern}:8000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--hostname=sillytavern"
      "--network-alias=sillytavern"
      "--network=sillytavern_default"
    ];
  };
}
