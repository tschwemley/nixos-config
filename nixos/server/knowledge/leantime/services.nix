{
  lib,
  pkgs,
  ...
}: {
  systemd = {
    services = {
      "podman-leantime" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        after = [
          "podman-network-leantime_leantime-net.service"
          "podman-volume-leantime_plugins.service"
          "podman-volume-leantime_public_userfiles.service"
          "podman-volume-leantime_userfiles.service"
        ];
        requires = [
          "podman-network-leantime_leantime-net.service"
          "podman-volume-leantime_plugins.service"
          "podman-volume-leantime_public_userfiles.service"
          "podman-volume-leantime_userfiles.service"
        ];
        partOf = [
          "podman-compose-leantime-root.target"
        ];
        wantedBy = [
          "podman-compose-leantime-root.target"
        ];
      };

      "podman-mysql_leantime" = {
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
        };
        after = [
          "podman-network-leantime_leantime-net.service"
          "podman-volume-leantime_db_data.service"
        ];
        requires = [
          "podman-network-leantime_leantime-net.service"
          "podman-volume-leantime_db_data.service"
        ];
        partOf = [
          "podman-compose-leantime-root.target"
        ];
        wantedBy = [
          "podman-compose-leantime-root.target"
        ];
      };

      # Networks
      "podman-network-leantime_leantime-net" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f leantime_leantime-net";
        };
        script = ''
          podman network inspect leantime_leantime-net || podman network create leantime_leantime-net
        '';
        partOf = ["podman-compose-leantime-root.target"];
        wantedBy = ["podman-compose-leantime-root.target"];
      };

      # Volumes
      "podman-volume-leantime_db_data" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect leantime_db_data || podman volume create leantime_db_data
        '';
        partOf = ["podman-compose-leantime-root.target"];
        wantedBy = ["podman-compose-leantime-root.target"];
      };

      "podman-volume-leantime_plugins" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect leantime_plugins || podman volume create leantime_plugins
        '';
        partOf = ["podman-compose-leantime-root.target"];
        wantedBy = ["podman-compose-leantime-root.target"];
      };

      "podman-volume-leantime_public_userfiles" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect leantime_public_userfiles || podman volume create leantime_public_userfiles
        '';
        partOf = ["podman-compose-leantime-root.target"];
        wantedBy = ["podman-compose-leantime-root.target"];
      };

      "podman-volume-leantime_userfiles" = {
        path = [pkgs.podman];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect leantime_userfiles || podman volume create leantime_userfiles
        '';
        partOf = ["podman-compose-leantime-root.target"];
        wantedBy = ["podman-compose-leantime-root.target"];
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."podman-compose-leantime-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };
  };
}
