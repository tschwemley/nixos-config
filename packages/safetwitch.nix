# Auto-generated using compose2nix v0.2.2.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."safetwitch-backend" = {
    image = "codeberg.org/safetwitch/safetwitch-backend:latest";
    environment = {
      "PORT" = "7000";
      "URL" = "https://changethis";
    };
    ports = [
      "127.0.0.1:7100:7000/tcp"
    ];
    user = "65534:65534";
    log-driver = "journald";
    extraOptions = [
      "--cap-drop=ALL"
      "--hostname=safetwitch-backend"
      "--network-alias=safetwitch-backend"
      "--network=safetwitch_default"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."podman-safetwitch-backend" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-safetwitch_default.service"
    ];
    requires = [
      "podman-network-safetwitch_default.service"
    ];
    partOf = [
      "podman-compose-safetwitch-root.target"
    ];
    wantedBy = [
      "podman-compose-safetwitch-root.target"
    ];
  };
  virtualisation.oci-containers.containers."safetwitch-frontend" = {
    image = "codeberg.org/safetwitch/safetwitch:latest";
    environment = {
      "SAFETWITCH_BACKEND_DOMAIN" = "changethis";
      "SAFETWITCH_DEFAULT_LOCALE" = "en";
      "SAFETWITCH_FALLBACK_LOCALE" = "en";
      "SAFETWITCH_HTTPS" = "true";
      "SAFETWITCH_INSTANCE_DOMAIN" = "changethis";
    };
    ports = [
      "127.0.0.1:8280:8280/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=CHOWN"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--hostname=safetwitch-frontend"
      "--network-alias=safetwitch-frontend"
      "--network=safetwitch_default"
      "--security-opt=no-new-privileges:true"
    ];
  };
  systemd.services."podman-safetwitch-frontend" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-safetwitch_default.service"
    ];
    requires = [
      "podman-network-safetwitch_default.service"
    ];
    partOf = [
      "podman-compose-safetwitch-root.target"
    ];
    wantedBy = [
      "podman-compose-safetwitch-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-safetwitch_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f safetwitch_default";
    };
    script = ''
      podman network inspect safetwitch_default || podman network create safetwitch_default
    '';
    partOf = [ "podman-compose-safetwitch-root.target" ];
    wantedBy = [ "podman-compose-safetwitch-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-safetwitch-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
