# Auto-generated using compose2nix v0.2.2.
{
  config,
  lib,
  pkgs,
  ...
}:

{
  virtualisation.oci-containers.containers = {
    # Containers
    "proxitok-chromedriver" = {
      image = "ghcr.io/zenika/alpine-chrome:with-chromedriver";
      labels = {
        "io.containers.autoupdate" = "registry";
      };
      log-driver = "journald";
      extraOptions = [
        "--pull=always"
        "--network-alias=chromedriver"
        "--network=proxitok_proxitok"
        "--security-opt=seccomp:${./chrome.json}"
        "--shm-size=1073741824"
      ];
    };

    "proxitok-redis" = {
      image = "docker.io/library/redis:7.4-alpine";
      labels = {
        "io.containers.autoupdate" = "registry";
      };
      user = "nobody";
      log-driver = "journald";
      extraOptions = [
        "--pull=always"
        "--cap-drop=ALL"
        "--network-alias=redis"
        "--network=proxitok_proxitok"
        "--security-opt=no-new-privileges:true"
      ];
    };

    "proxitok-web" = {
      image = "ghcr.io/pablouser1/proxitok:master";
      environment = {
        "API_CACHE" = "redis";
        "API_CHROMEDRIVER" = "http://proxitok-chromedriver:9515";
        "LATTE_CACHE" = "/cache";
        "REDIS_HOST" = "proxitok-redis";
        "REDIS_PORT" = "6379";
      };
      volumes = [
        "proxitok_proxitok-cache:/cache:rw"
      ];
      ports = [
        "${config.portMap.proxitok}:8080/tcp"
      ];
      labels = {
        "io.containers.autoupdate" = "registry";
      };
      dependsOn = [
        "proxitok-chromedriver"
        "proxitok-redis"
      ];
      log-driver = "journald";
      extraOptions = [
        "--pull=always"
        "--cap-add=CHOWN"
        "--cap-add=SETGID"
        "--cap-add=SETUID"
        "--cap-drop=ALL"
        "--network-alias=web"
        "--network=proxitok_proxitok"
        "--security-opt=no-new-privileges:true"
      ];
    };
  };

  systemd = {
    services = {
      "podman-proxitok-chromedriver" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "no";
        };
        after = [
          "podman-network-proxitok_proxitok.service"
        ];
        requires = [
          "podman-network-proxitok_proxitok.service"
        ];
        partOf = [
          "podman-compose-proxitok-root.target"
        ];
        wantedBy = [
          "podman-compose-proxitok-root.target"
        ];
      };
      "podman-proxitok-redis" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-proxitok_proxitok.service"
        ];
        requires = [
          "podman-network-proxitok_proxitok.service"
        ];
        partOf = [
          "podman-compose-proxitok-root.target"
        ];
        wantedBy = [
          "podman-compose-proxitok-root.target"
        ];
      };
      "podman-proxitok-web" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "no";
        };
        after = [
          "podman-network-proxitok_proxitok.service"
          "podman-volume-proxitok_proxitok-cache.service"
        ];
        requires = [
          "podman-network-proxitok_proxitok.service"
          "podman-volume-proxitok_proxitok-cache.service"
        ];
        partOf = [
          "podman-compose-proxitok-root.target"
        ];
        wantedBy = [
          "podman-compose-proxitok-root.target"
        ];
      };

      # Networks
      "podman-network-proxitok_proxitok" = {
        path = [ pkgs.podman ];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f proxitok_proxitok";
        };
        script = ''
          podman network inspect proxitok_proxitok || podman network create proxitok_proxitok
        '';
        partOf = [ "podman-compose-proxitok-root.target" ];
        wantedBy = [ "podman-compose-proxitok-root.target" ];
      };

      # Volumes
      "podman-volume-proxitok_proxitok-cache" = {
        path = [ pkgs.podman ];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };
        script = ''
          podman volume inspect proxitok_proxitok-cache || podman volume create proxitok_proxitok-cache
        '';
        partOf = [ "podman-compose-proxitok-root.target" ];
        wantedBy = [ "podman-compose-proxitok-root.target" ];
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."podman-compose-proxitok-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
