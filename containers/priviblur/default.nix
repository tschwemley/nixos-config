{
  config,
  lib,
  pkgs,
  ...
}:
{
  services.nginx.virtualHosts."tumblr.schwem.io" = {
    # TODO: use another proxy or remove the commented out items
    # extraConfig = ''
    #   error_page 401 = @error401;
    # '';

    locations = {
      "/" = {
        proxyPass = "http://127.0.0.1:${config.portMap.priviblur}";
        proxyWebsockets = true;
      };

      "/robots.txt".proxyPass = ".robots";

      # ".auth" = {
      #   proxyPass = "http://articuno:8082/auth";
      #   extraConfig = "internal;";
      # };
      #
      # "/logout".return = "302 https://auth.schwem.io/logout?go=https://$http_host";
      # "@error401".return = "302 https://auth.schwem.io/login?go=https://$http_host$request_uri";
    };
  };

  # Containers
  virtualisation.oci-containers.containers = {
    "priviblur" = {
      image = "quay.io/syeopite/priviblur:latest";
      volumes = [
        "${./config.toml}:/priviblur/config.toml:ro,Z"
      ];
      ports = [
        "127.0.0.1:${config.portMap.priviblur}:8000/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=priviblur"
        "--network=priviblur_default"
      ];
    };

    "priviblur-redis" = {
      image = "redis:6.2-alpine";
      volumes = [
        "priviblur_priviblur-redis:/data:rw"
      ];
      cmd = [
        "redis-server"
        "--loglevel"
        "warning"
      ];
      user = "999:1000";
      log-driver = "journald";
      extraOptions = [
        "--cap-drop=ALL"
        "--network-alias=priviblur-redis"
        "--network=priviblur_default"
        "--security-opt=no-new-privileges:true"
      ];
    };
  };

  systemd = {
    services = {
      "podman-priviblur" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-priviblur_default.service"
        ];
        requires = [
          "podman-network-priviblur_default.service"
        ];
        partOf = [
          "podman-compose-priviblur-root.target"
        ];
        wantedBy = [
          "podman-compose-priviblur-root.target"
        ];
      };

      "podman-priviblur-redis" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
        };
        after = [
          "podman-network-priviblur_default.service"
          "podman-volume-priviblur_priviblur-redis.service"
        ];
        requires = [
          "podman-network-priviblur_default.service"
          "podman-volume-priviblur_priviblur-redis.service"
        ];
        partOf = [
          "podman-compose-priviblur-root.target"
        ];
        wantedBy = [
          "podman-compose-priviblur-root.target"
        ];
      };

      # Networks
      "podman-network-priviblur_default" = {
        path = [ pkgs.podman ];
        partOf = [ "podman-compose-priviblur-root.target" ];
        wantedBy = [ "podman-compose-priviblur-root.target" ];

        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "podman network rm -f priviblur_default";
        };

        script = ''
          podman network inspect priviblur_default || podman network create priviblur_default
        '';
      };

      # Volumes
      "podman-volume-priviblur_priviblur-redis" = {
        path = [ pkgs.podman ];
        partOf = [ "podman-compose-priviblur-root.target" ];
        wantedBy = [ "podman-compose-priviblur-root.target" ];

        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
        };

        script = ''
          podman volume inspect priviblur_priviblur-redis || podman volume create priviblur_priviblur-redis
        '';
      };
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    targets."podman-compose-priviblur-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
